[
    {
        "id": "cf97d56318f211dd",
        "type": "subflow",
        "name": "Insert order to Database",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 0,
                "y": 80,
                "wires": [
                    {
                        "id": "bf6e1c470a7bbfa8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 80,
                "wires": [
                    {
                        "id": "1c88cb0e89e5025c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bf6e1c470a7bbfa8",
        "type": "switch",
        "z": "cf97d56318f211dd",
        "name": "Check if order is complete",
        "property": "orderComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "1c88cb0e89e5025c",
                "deb59162394e03be"
            ]
        ]
    },
    {
        "id": "1c88cb0e89e5025c",
        "type": "function",
        "z": "cf97d56318f211dd",
        "name": "Insert order to database",
        "func": "\nmsg.topic = `INSERT INTO MENU_ORDER(date,user_id, order_status) VALUES \n            (${msg.date}, ${msg.user}, \"Order successful\");`\n            \nmsg.payload = \"Your order was successful!\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 80,
        "wires": [
            [
                "c9b27a7ed7070f64"
            ]
        ]
    },
    {
        "id": "c9b27a7ed7070f64",
        "type": "sqlite",
        "z": "cf97d56318f211dd",
        "mydb": "963ab30464d0e7c2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Mooncake Database",
        "x": 1160,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "88e6cf8790042a40",
        "type": "function",
        "z": "cf97d56318f211dd",
        "name": "Add each order item to the database",
        "func": "const item = Object.keys(msg.payload)[0]\n      quantity = msg.payload[item]\n      date = msg.date;\n            \nmsg.topic = `INSERT INTO ORDER_ITEM(order_id, item_name, quantity) VALUES(\n           (SELECT order_id FROM MENU_ORDER WHERE date='${date}' AND user_id='${msg.user}'),'${item}', '${quantity}');`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 220,
        "wires": [
            [
                "c9b27a7ed7070f64"
            ]
        ]
    },
    {
        "id": "deb59162394e03be",
        "type": "split",
        "z": "cf97d56318f211dd",
        "name": "Split each order item",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 480,
        "y": 220,
        "wires": [
            [
                "88e6cf8790042a40"
            ]
        ]
    },
    {
        "id": "db18efe3ac9314eb",
        "type": "subflow",
        "name": "Display order selection menu",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "62805e4ba46602c8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1180,
                "y": 80,
                "wires": [
                    {
                        "id": "a77140687d405723",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "PLACEHOLDER",
                "type": "str",
                "value": "Choose Order ID"
            },
            {
                "name": "CUSTOM_ID",
                "type": "str",
                "value": ""
            },
            {
                "name": "SINGLE_SELECTION",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "dc9c41d4d73e24d0",
        "type": "function",
        "z": "db18efe3ac9314eb",
        "name": "Display order ID selection",
        "func": "let options = msg.orderIds\n\noptions = options.map(i => ({\"value\": `${i}`, \"label\": `${i}`}))\nlet maxValues = options.length\n\nmsg.payload = \"\"\n\nif (env.get(\"SINGLE_SELECTION\")){\n    maxValues = 1\n}\n\nmsg.components = [\n    {\n        \"type\": 1,\n        \"components\": [\n            {\n                \"type\": 3,\n                \"custom_id\": env.get(\"CUSTOM_ID\"),\n                \"options\": options,\n                \"placeholder\": env.get(\"PLACEHOLDER\"),\n                \"min_values\": 1,\n                \"max_values\": maxValues\n            }\n        ]\n    }\n]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 80,
        "wires": [
            [
                "a77140687d405723"
            ]
        ]
    },
    {
        "id": "a77140687d405723",
        "type": "json",
        "z": "db18efe3ac9314eb",
        "name": "Convert to JSON to JS obj",
        "property": "components",
        "action": "obj",
        "pretty": false,
        "x": 900,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "62805e4ba46602c8",
        "type": "switch",
        "z": "db18efe3ac9314eb",
        "name": "Proceed only if there are cancellable orders",
        "property": "orderIds",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 80,
        "wires": [
            [
                "dc9c41d4d73e24d0"
            ]
        ]
    },
    {
        "id": "765dc67df7a1e33f",
        "type": "subflow",
        "name": "Display Summary",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 80,
                "wires": [
                    {
                        "id": "1789fe40eaa02b9b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 80,
                "wires": [
                    {
                        "id": "a306a154e8a7c534",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "APPEND",
                "type": "str",
                "value": ""
            },
            {
                "name": "ADDITIONAL_QUERY",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1789fe40eaa02b9b",
        "type": "function",
        "z": "765dc67df7a1e33f",
        "name": "Respond to !summary",
        "func": "const userId = msg.author.id\n\nmsg.topic=`SELECT m.order_id, date, order_status, item_name, quantity FROM \n            MENU_ORDER m INNER JOIN ORDER_ITEM i ON m.order_id = i.order_id\n            WHERE user_id='${userId}' ${env.get(\"ADDITIONAL_QUERY\")};`\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "69fcdf8e37d95d6d"
            ]
        ]
    },
    {
        "id": "69fcdf8e37d95d6d",
        "type": "sqlite",
        "z": "765dc67df7a1e33f",
        "mydb": "963ab30464d0e7c2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Mooncake Database",
        "x": 440,
        "y": 80,
        "wires": [
            [
                "a306a154e8a7c534"
            ]
        ]
    },
    {
        "id": "a306a154e8a7c534",
        "type": "function",
        "z": "765dc67df7a1e33f",
        "name": "Extract and format summary output",
        "func": "if (msg.payload.length === 0){\n    msg.payload = \"You haven't made any orders previously. Hurry up and make an order!\"\n    msg.orderIds= []\n    return msg;\n} \n\nlet orderIds = []\nlet resStr = `Index\\t     Date Ordered\\t\\t\\t            Order status\\t\\t        Items\\n`\n\n//https://stackoverflow.com/questions/40774697/how-can-i-group-an-array-of-objects-by-key\nconst groupByKey = (list, key) => list.reduce((hash, obj) => ({...hash, [obj[key]]:( hash[obj[key]] || [] ).concat(obj)}), {})\n\nconst results = groupByKey(msg.payload, 'order_id'),\n      keys = Object.keys(results)\n\nfor (let i =0; i< keys.length; i++){\n    let order = results[keys[i]]\n    let itemObj = {}\n    for (let i=0; i<order.length; i++){\n        let item = order[i].item_name,\n            quantity = order[i].quantity\n        itemObj[item] = quantity\n    }\n    let orderItem = order[0],\n        order_id = orderItem.order_id,\n        date = new Date(orderItem.date).toLocaleString(),\n        order_status = orderItem.order_status,\n        itemStr = JSON.stringify(itemObj)\n        \n    orderIds.push(order_id)\n    resStr += `#${order_id}\\t\\t      ${date}     ${order_status}\\t     ${itemStr}\\n`\n}\n\nlet append = env.get(\"APPEND\")\n\nif (append !== \"\"){\n    resStr += `\\n${env.get(\"APPEND\")}`\n}\n\nmsg.payload = resStr \nmsg.orderIds = orderIds\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "eaf0f6e02f768ad8",
        "type": "tab",
        "label": "Discord-bot",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "645c2c6af622055d",
        "type": "group",
        "z": "eaf0f6e02f768ad8",
        "name": "Initialize database",
        "style": {
            "label": true
        },
        "nodes": [
            "2402f6914d9d012d",
            "29b452dc11030148",
            "512ea85673114b35",
            "f64c02cd4a60ca6f"
        ],
        "x": 74,
        "y": 1839,
        "w": 852,
        "h": 182
    },
    {
        "id": "4143a8afa0a0f8d3",
        "type": "discordMessage",
        "z": "eaf0f6e02f768ad8",
        "name": "",
        "token": "",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "945732e0e087895c"
            ]
        ]
    },
    {
        "id": "6873d1a99446b6b1",
        "type": "discordMessageManager",
        "z": "eaf0f6e02f768ad8",
        "name": "",
        "channel": "",
        "token": "",
        "x": 2070,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "8818d7ed4ca004da",
        "type": "change",
        "z": "eaf0f6e02f768ad8",
        "name": "Respond to !order",
        "rules": [
            {
                "t": "set",
                "p": "components",
                "pt": "msg",
                "to": "[{\"type\":1,\"components\":[{\"type\":3,\"custom_id\":\"Order\",\"options\":[{\"label\":\"White Lotus\",\"value\":\"White Lotus\",\"description\":\"Cantonese-style mooncake. White lotus paste filling with a natural fragrance\",\"emoji\":{\"name\":\"💮\",\"id\":null}},{\"label\":\"Red Bean\",\"value\":\"Red Bean\",\"description\":\"A classic. Sweet bean paste and the outer skin makes the mooncake smooth and have a richer flavor\",\"emoji\":{\"name\":\"🥮\",\"id\":null}},{\"label\":\"Green Tea\",\"value\":\"Green Tea\",\"description\":\"Fresh natural taste. Not overly sweet and has a certain health effect!\",\"emoji\":{\"name\":\"💚\",\"id\":null}}],\"placeholder\":\"Choose your order\",\"min_values\":1,\"max_values\":3}]}]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Click the button below to order some mooncake!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 540,
        "wires": [
            [
                "9207ae4da593280e"
            ]
        ]
    },
    {
        "id": "9207ae4da593280e",
        "type": "json",
        "z": "eaf0f6e02f768ad8",
        "name": "Convert to JSON to JS obj",
        "property": "components",
        "action": "obj",
        "pretty": false,
        "x": 1000,
        "y": 540,
        "wires": [
            [
                "6873d1a99446b6b1"
            ]
        ]
    },
    {
        "id": "a709d8d54ea63ddd",
        "type": "discordInteraction",
        "z": "eaf0f6e02f768ad8",
        "name": "MoonCake Menu Selection ",
        "token": "",
        "interactionType": "selectMenu",
        "custom_id": "Order",
        "commandResponse": "",
        "interactionObject": true,
        "x": 190,
        "y": 860,
        "wires": [
            [
                "2cd3d6ea1f60ec0c"
            ]
        ]
    },
    {
        "id": "7dd3d47bdcadc134",
        "type": "change",
        "z": "eaf0f6e02f768ad8",
        "name": "Respond to !help",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "embeds",
                "pt": "msg",
                "to": "{\"title\":\"help\",\"description\":\"Commands you can use with Mooncakes bot!\",\"color\":\"#DE5E1F\",\"fields\":[{\"name\":\"!help\",\"value\":\"Provides users with a list of valid commands.\"},{\"name\":\"!menu\",\"value\":\"Displays a menu for users to view the available mooncakes.\"},{\"name\":\"!order\",\"value\":\"This command allows users to place their orders.\"},{\"name\":\"!summary\",\"value\":\"Provides a list of all previous orders a user has made.\"},{\"name\":\"!cancel\",\"value\":\"Provides selection menu to cancel pending orders.\"},{\"name\":\"!repeat\",\"value\":\"Provides selection menu to repeat any previous order.\"}]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 420,
        "wires": [
            [
                "6873d1a99446b6b1"
            ]
        ]
    },
    {
        "id": "b676a1bf3cb0c2f0",
        "type": "change",
        "z": "eaf0f6e02f768ad8",
        "name": "Respond to !menu",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "embeds",
                "pt": "msg",
                "to": "{\"title\":\"Menu\",\"description\":\"Our Menu!\",\"color\":\"#DE5E1F\",\"fields\":[{\"name\":\"White Lotus Mooncake\",\"value\":\"Cantonese-style mooncake. White lotus paste filling with a natural fragrance\"},{\"name\":\"Red Bean Mooncake\",\"value\":\"A classic. Sweet bean paste and the outer skin makes the mooncake smooth and have a richer flavor\"},{\"name\":\"Green Tea Mooncake\",\"value\":\"Fresh natural taste. Not overly sweet and has a certain health effect!\"}]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 480,
        "wires": [
            [
                "6873d1a99446b6b1"
            ]
        ]
    },
    {
        "id": "c8ed5bc045a9ea7b",
        "type": "function",
        "z": "eaf0f6e02f768ad8",
        "name": "Display Quantity Selection",
        "func": "const orderLimit = 10;\n\nconst createOptionRange = () => {\n    const options = []\n    for (i =0; i<orderLimit; i++){\n        options.push({\"value\": `${i+1}`, \"label\": `${i+1}`})\n    }\n    return options\n}\n\nmsg.components = [\n    {\n        \"type\": 1,\n        \"components\": [\n            {\n                \"type\": 3,\n                \"custom_id\": `quantity${msg.payload.replace(/\\s/g, \"\")}`,\n                \"options\": createOptionRange(),\n                \"placeholder\": \"Choose your order\",\n                \"min_values\": 1,\n                \"max_values\": 1\n            }\n        ]\n    }\n]\n\nconst orderItemAmount = flow.get(msg.user)\norderItemAmount.orderItems += 1\nflow.set(msg.user, orderItemAmount)\n\nmsg.payload = `How many ${msg.payload} Mooncakes do you need?`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 860,
        "wires": [
            [
                "950df94f6894367c"
            ]
        ]
    },
    {
        "id": "2cd3d6ea1f60ec0c",
        "type": "change",
        "z": "eaf0f6e02f768ad8",
        "name": "Extract ordered items and user",
        "rules": [
            {
                "t": "set",
                "p": "user",
                "pt": "msg",
                "to": "payload.user.id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.values",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 860,
        "wires": [
            [
                "138ef54f5c3045cb",
                "7790f334d28e60f8",
                "b2ee650bfdb9164d"
            ]
        ]
    },
    {
        "id": "138ef54f5c3045cb",
        "type": "split",
        "z": "eaf0f6e02f768ad8",
        "name": "Send each item",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 760,
        "y": 860,
        "wires": [
            [
                "c8ed5bc045a9ea7b"
            ]
        ]
    },
    {
        "id": "7790f334d28e60f8",
        "type": "function",
        "z": "eaf0f6e02f768ad8",
        "name": "Start new order",
        "func": "const date = new Date()\n\nmsg.embeds ={\n    \"title\": \"New Order:\",\n    \"description\": `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`,\n    \"color\": \"#DE5E1F\"\n}\n\nflow.set(msg.user, {\"orderItems\":0})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 800,
        "wires": [
            [
                "950df94f6894367c"
            ]
        ]
    },
    {
        "id": "392264fcba523981",
        "type": "discordInteraction",
        "z": "eaf0f6e02f768ad8",
        "name": "QuantitySelection",
        "token": "",
        "interactionType": "selectMenu",
        "custom_id": "quantityGreenTea,quantityWhiteLotus,quantityRedBean",
        "commandResponse": "",
        "interactionObject": false,
        "x": 160,
        "y": 1040,
        "wires": [
            [
                "39cc22417d6e8e4c"
            ]
        ]
    },
    {
        "id": "39cc22417d6e8e4c",
        "type": "function",
        "z": "eaf0f6e02f768ad8",
        "name": "Save selections to context store",
        "func": "const item = msg.payload.customId.replace('quantity', '')\nconst quantity = parseInt(msg.payload.values[0])\n\nconst userOrder = flow.get(msg.payload.user.id);\n\nif (userOrder[item] === undefined){\n    userOrder[item] = {\n        \"quantity\": quantity,\n        \"selection\": 1\n    }\n} else{\n    userOrder[item].quantity = quantity\n}\n\nflow.set(msg.payload.user.id, userOrder)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "b2ee650bfdb9164d",
        "type": "change",
        "z": "eaf0f6e02f768ad8",
        "name": "Send submit button",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "components",
                "pt": "msg",
                "to": "[{\"type\":1,\"components\":[{\"type\":2,\"custom_id\":\"orderSubmit\",\"label\":\"Submit\",\"style\":\"SUCCESS\"}]}]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 920,
        "wires": [
            [
                "91b1b0aa0a0d1df5"
            ]
        ]
    },
    {
        "id": "91b1b0aa0a0d1df5",
        "type": "json",
        "z": "eaf0f6e02f768ad8",
        "name": "",
        "property": "components",
        "action": "obj",
        "pretty": false,
        "x": 990,
        "y": 920,
        "wires": [
            [
                "950df94f6894367c"
            ]
        ]
    },
    {
        "id": "d6844393ee6666cb",
        "type": "discordInteraction",
        "z": "eaf0f6e02f768ad8",
        "name": "Submit Button Interaction",
        "token": "",
        "interactionType": "button",
        "custom_id": "orderSubmit",
        "commandResponse": "",
        "interactionObject": false,
        "x": 190,
        "y": 1320,
        "wires": [
            [
                "9191c25afea3e462"
            ]
        ]
    },
    {
        "id": "9191c25afea3e462",
        "type": "function",
        "z": "eaf0f6e02f768ad8",
        "name": "Obtain the order",
        "func": "const menu = [\"WhiteLotus\", \"RedBean\", \"GreenTea\"],\n      menuRecord = flow.get(msg.payload.user.id),\n      date = new Date().getTime()\n      \nmsg.orderComplete = \"false\"\n\nlet orderCount = 0\n    selectedItems = []\n\n\nfor (let i=0; i<menu.length; i++){\n    let item = menu[i]\n    if (menuRecord[item] !== undefined){\n        orderCount += menuRecord[item].selection\n        let itemObj = {}\n        itemObj[item]=menuRecord[item].quantity\n        selectedItems.push(itemObj)\n    }\n}\n\nif (orderCount === menuRecord.orderItems){\n    msg.orderComplete = \"true\"\n    msg.user = msg.payload.user.id\n    msg.payload = selectedItems\n    msg.date = date;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1320,
        "wires": [
            [
                "8fad7c3a965ddc68"
            ]
        ]
    },
    {
        "id": "945732e0e087895c",
        "type": "switch",
        "z": "eaf0f6e02f768ad8",
        "name": "Check if message has a command",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "!repeat",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "!summary",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "!help",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "!menu",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "!order",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "!cancel",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 460,
        "y": 500,
        "wires": [
            [
                "669ca1f32ea803bd"
            ],
            [
                "d671c4bbae713125"
            ],
            [
                "7dd3d47bdcadc134"
            ],
            [
                "b676a1bf3cb0c2f0"
            ],
            [
                "8818d7ed4ca004da"
            ],
            [
                "1ccf8a9a47ee9b89"
            ]
        ]
    },
    {
        "id": "950df94f6894367c",
        "type": "discordMessageManager",
        "z": "eaf0f6e02f768ad8",
        "name": "",
        "channel": "",
        "token": "",
        "x": 1790,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "195bb607d2363748",
        "type": "change",
        "z": "eaf0f6e02f768ad8",
        "name": "Display success message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "embeds",
                "pt": "msg",
                "to": "{\"title\":\"Success\",\"description\":\"Your order was successful!\",\"color\":\"#DE5E1F\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 1220,
        "wires": [
            [
                "950df94f6894367c"
            ]
        ]
    },
    {
        "id": "2402f6914d9d012d",
        "type": "sqlite",
        "z": "eaf0f6e02f768ad8",
        "g": "645c2c6af622055d",
        "mydb": "963ab30464d0e7c2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Create Mooncakes.db if not present",
        "x": 760,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "29b452dc11030148",
        "type": "inject",
        "z": "eaf0f6e02f768ad8",
        "g": "645c2c6af622055d",
        "name": "Initialize on start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1920,
        "wires": [
            [
                "512ea85673114b35",
                "f64c02cd4a60ca6f"
            ]
        ]
    },
    {
        "id": "512ea85673114b35",
        "type": "change",
        "z": "eaf0f6e02f768ad8",
        "g": "645c2c6af622055d",
        "name": "Create MENU_ORDER Table",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "CREATE TABLE IF NOT EXISTS MENU_ORDER          (order_id INTEGER PRIMARY KEY, date INT, user_id TEXT, order_status TEXT);",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1880,
        "wires": [
            [
                "2402f6914d9d012d"
            ]
        ]
    },
    {
        "id": "f64c02cd4a60ca6f",
        "type": "change",
        "z": "eaf0f6e02f768ad8",
        "g": "645c2c6af622055d",
        "name": "Create ORDER_ITEM table",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "CREATE TABLE IF NOT EXISTS ORDER_ITEM(order_id INTEGER, item_name TEXT, quantity INT, PRIMARY KEY(order_id, item_name));",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 1980,
        "wires": [
            [
                "2402f6914d9d012d"
            ]
        ]
    },
    {
        "id": "caf67e79d879dae5",
        "type": "function",
        "z": "eaf0f6e02f768ad8",
        "name": "Delete from MENU_ORDER",
        "func": "const userId = msg.payload.user.id\nconst order_ids = msg.payload.values\n\nmsg.user = userId\n\nmsg.topic=`DELETE FROM MENU_ORDER WHERE user_id='${userId}' AND order_id IN (${order_ids.toString()})`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1480,
        "wires": [
            [
                "04e94377dc486842"
            ]
        ]
    },
    {
        "id": "5439f07dc8b2f2ee",
        "type": "discordInteraction",
        "z": "eaf0f6e02f768ad8",
        "name": "CancelSelection",
        "token": "",
        "interactionType": "selectMenu",
        "custom_id": "OrderCancel",
        "commandResponse": "",
        "interactionObject": false,
        "x": 160,
        "y": 1480,
        "wires": [
            [
                "caf67e79d879dae5",
                "5fa049f6a5e694ba",
                "91fedb63ef035c70"
            ]
        ]
    },
    {
        "id": "04e94377dc486842",
        "type": "sqlite",
        "z": "eaf0f6e02f768ad8",
        "mydb": "963ab30464d0e7c2",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Mooncake Database",
        "x": 700,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "91fedb63ef035c70",
        "type": "function",
        "z": "eaf0f6e02f768ad8",
        "name": "Send cancellation message",
        "func": "let order_ids = msg.payload.values;\nmsg.channel = msg.payload.channelId\n\nif (order_ids.length === 1){\n    msg.payload =  `Order: ${order_ids[0]} has been cancelled`\n} else{\n    msg.payload = `Orders: ${order_ids.toString()} have been cancelled`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1680,
        "wires": [
            [
                "bd36d719914c2fab"
            ]
        ]
    },
    {
        "id": "5fa049f6a5e694ba",
        "type": "function",
        "z": "eaf0f6e02f768ad8",
        "name": "Delete from ITEM_ORDER",
        "func": "msg.topic = `DELETE FROM ORDER_ITEM WHERE order_id\n            IN (${msg.payload.values.toString()})`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1580,
        "wires": [
            [
                "04e94377dc486842"
            ]
        ]
    },
    {
        "id": "bd36d719914c2fab",
        "type": "discordMessageManager",
        "z": "eaf0f6e02f768ad8",
        "name": "",
        "channel": "",
        "token": "",
        "x": 790,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "d671c4bbae713125",
        "type": "subflow:765dc67df7a1e33f",
        "z": "eaf0f6e02f768ad8",
        "name": "Respond to !summary",
        "x": 780,
        "y": 360,
        "wires": [
            [
                "6873d1a99446b6b1"
            ]
        ]
    },
    {
        "id": "669ca1f32ea803bd",
        "type": "subflow:765dc67df7a1e33f",
        "z": "eaf0f6e02f768ad8",
        "name": "Respond to !repeat",
        "env": [
            {
                "name": "APPEND",
                "value": "Select an Order ID to repeat a previous order!",
                "type": "str"
            }
        ],
        "x": 770,
        "y": 300,
        "wires": [
            [
                "6873d1a99446b6b1",
                "f77e05d008bae82f"
            ]
        ]
    },
    {
        "id": "660212f3d42c49a4",
        "type": "subflow:db18efe3ac9314eb",
        "z": "eaf0f6e02f768ad8",
        "name": "Display order selection menu",
        "env": [
            {
                "name": "CUSTOM_ID",
                "value": "OrderCancel",
                "type": "str"
            }
        ],
        "x": 1120,
        "y": 600,
        "wires": [
            [
                "6873d1a99446b6b1"
            ]
        ]
    },
    {
        "id": "f77e05d008bae82f",
        "type": "subflow:db18efe3ac9314eb",
        "z": "eaf0f6e02f768ad8",
        "name": "Display order selection menu",
        "env": [
            {
                "name": "CUSTOM_ID",
                "value": "OrderRepeat",
                "type": "str"
            }
        ],
        "x": 1140,
        "y": 300,
        "wires": [
            [
                "6873d1a99446b6b1"
            ]
        ]
    },
    {
        "id": "54db784df9faba71",
        "type": "discordInteraction",
        "z": "eaf0f6e02f768ad8",
        "name": "RepeatSelection",
        "token": "",
        "interactionType": "selectMenu",
        "custom_id": "OrderRepeat",
        "commandResponse": "",
        "interactionObject": false,
        "x": 160,
        "y": 1220,
        "wires": [
            [
                "ac47b417f6e627d5"
            ]
        ]
    },
    {
        "id": "ac47b417f6e627d5",
        "type": "function",
        "z": "eaf0f6e02f768ad8",
        "name": "Query previous order ID",
        "func": "const orderId = msg.payload.values[0],\n      date = new Date().getTime()\n      \nmsg.topic = `SELECT item_name, quantity FROM ORDER_ITEM WHERE order_id='${orderId}'`\nmsg.date = date\nmsg.user = msg.payload.user.id\nmsg.channel = msg.payload.channelId\nmsg.orderComplete = \"true\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1220,
        "wires": [
            [
                "a3b386c73b1579fd"
            ]
        ]
    },
    {
        "id": "a3b386c73b1579fd",
        "type": "sqlite",
        "z": "eaf0f6e02f768ad8",
        "mydb": "4cb129b3923edcd0",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 620,
        "y": 1220,
        "wires": [
            [
                "010b45415153a4bd"
            ]
        ]
    },
    {
        "id": "8fad7c3a965ddc68",
        "type": "subflow:cf97d56318f211dd",
        "z": "eaf0f6e02f768ad8",
        "name": "",
        "x": 1210,
        "y": 1220,
        "wires": [
            [
                "195bb607d2363748"
            ]
        ]
    },
    {
        "id": "010b45415153a4bd",
        "type": "function",
        "z": "eaf0f6e02f768ad8",
        "name": "Format input for database",
        "func": "let itemArray = msg.payload,\n    resArray = [], itemObj = {}, item, quantity;\n\nfor (let i=0; i< itemArray.length; i++){\n    itemObj = {}\n    item = itemArray[i].item_name\n    quantity = itemArray[i].quantity\n    \n    itemObj[item] = quantity\n    resArray.push(itemObj)\n}\n\nmsg.payload = resArray\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1220,
        "wires": [
            [
                "8fad7c3a965ddc68"
            ]
        ]
    },
    {
        "id": "1ccf8a9a47ee9b89",
        "type": "subflow:765dc67df7a1e33f",
        "z": "eaf0f6e02f768ad8",
        "name": "Respond to !cancel",
        "env": [
            {
                "name": "APPEND",
                "value": "Select the Order ID to cancel your order",
                "type": "str"
            },
            {
                "name": "ADDITIONAL_QUERY",
                "value": "AND order_status='Order successful'",
                "type": "str"
            }
        ],
        "x": 770,
        "y": 600,
        "wires": [
            [
                "660212f3d42c49a4",
                "6873d1a99446b6b1"
            ]
        ]
    },
    {
        "id": "963ab30464d0e7c2",
        "type": "sqlitedb",
        "db": "Mooncakes.db",
        "mode": "RWC"
    },
    {
        "id": "4cb129b3923edcd0",
        "type": "sqlitedb",
        "db": "Mooncakes.db",
        "mode": "RWC"
    }
]