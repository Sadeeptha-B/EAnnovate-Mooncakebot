[
    {
        "id": "023d3c161439f2e9",
        "type": "subflow",
        "name": "Deactivate Device",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "dafb536a12a69b14"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 580,
                "y": 80,
                "wires": [
                    {
                        "id": "0914b931de1a3157",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DELAY",
                "type": "str",
                "value": "1"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0914b931de1a3157",
        "type": "change",
        "z": "023d3c161439f2e9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "dafb536a12a69b14",
        "type": "delay",
        "z": "023d3c161439f2e9",
        "name": "",
        "pauseType": "delay",
        "timeout": "${DELAY}",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "0914b931de1a3157"
            ]
        ]
    },
    {
        "id": "b96e85bed3b4466c",
        "type": "tab",
        "label": "New Working Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c1fd251844604729",
        "type": "group",
        "z": "b96e85bed3b4466c",
        "name": "Initialize variables on Factory I/O",
        "style": {
            "label": true
        },
        "nodes": [
            "8dc7282cac11063e",
            "486a7f7d96422b52",
            "ac4948c11cf7dab1",
            "bed851f112bd9bc5",
            "7ce7b716a79ac8f5",
            "e6e5eea52c68ead9",
            "e0713e27f9c226a7",
            "9e22b5dcbfeba256",
            "9b78d4441cd41fdc",
            "86bdc05d0d9e5244",
            "d484066f1af2a17a",
            "5cb8a18cdb39ba64",
            "02f12d4ebd41a80f",
            "1ecc7bcc7267ceb9",
            "eaba63b69bc314fc",
            "a255839ffd013d35"
        ],
        "x": 94,
        "y": 1119,
        "w": 912,
        "h": 1002
    },
    {
        "id": "687ed382f2a511da",
        "type": "group",
        "z": "b96e85bed3b4466c",
        "name": "Dashboard",
        "style": {
            "label": true
        },
        "nodes": [
            "0de7aa6ce38bea1c",
            "0786470e050d17ad",
            "c71770369a336503",
            "6337e2e7593a0408",
            "6abe68b949a3378d",
            "6148da871eaed997",
            "ac9a2228daef2b02",
            "ea53ad91afc6fb6e",
            "0b925520a4301b62",
            "8b519fca6d840be7",
            "184379c2b58cf9e7",
            "911548d5b902c415",
            "38e9caa44078338c"
        ],
        "x": 1214,
        "y": 759,
        "w": 1312,
        "h": 482
    },
    {
        "id": "8dc7282cac11063e",
        "type": "OpcUa-Server",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "port": "53880",
        "name": "",
        "endpoint": "",
        "users": "users.json",
        "nodesetDir": "",
        "folderName4PKI": "",
        "autoAcceptUnknownCertificate": true,
        "registerToDiscovery": false,
        "constructDefaultAddressSpace": true,
        "allowAnonymous": true,
        "endpointNone": true,
        "endpointSign": true,
        "endpointSignEncrypt": true,
        "endpointBasic128Rsa15": true,
        "endpointBasic256": true,
        "endpointBasic256Sha256": true,
        "maxNodesPerBrowse": 0,
        "maxNodesPerHistoryReadData": 0,
        "maxNodesPerHistoryReadEvents": 0,
        "maxNodesPerHistoryUpdateData": 0,
        "maxNodesPerRead": 0,
        "maxNodesPerWrite": 0,
        "maxNodesPerMethodCall": 0,
        "maxNodesPerRegisterNodes": 0,
        "maxNodesPerNodeManagement": 0,
        "maxMonitoredItemsPerCall": 0,
        "maxNodesPerHistoryUpdateEvents": 0,
        "maxNodesPerTranslateBrowsePathsToNodeIds": 0,
        "maxConnectionsPerEndpoint": "60",
        "maxMessageSize": 4096,
        "maxBufferSize": 4096,
        "x": 900,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "486a7f7d96422b52",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_sensor0;datatype=Boolean",
        "datatype": "Boolean",
        "value": "0",
        "name": "_sensor0",
        "x": 540,
        "y": 1160,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "ac4948c11cf7dab1",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_sensor1;datatype=Boolean",
        "datatype": "Boolean",
        "value": "0",
        "name": "_sensor1",
        "x": 540,
        "y": 1240,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "bed851f112bd9bc5",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_sensor2;datatype=Boolean",
        "datatype": "Boolean",
        "value": "0",
        "name": "_sensor2",
        "x": 540,
        "y": 1340,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "7ce7b716a79ac8f5",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_conveyor0;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "",
        "name": "_conveyor0",
        "x": 550,
        "y": 1440,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "e6e5eea52c68ead9",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_conveyor1;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "",
        "name": "_conveyor1",
        "x": 550,
        "y": 1500,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "e0713e27f9c226a7",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_conveyor2;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "",
        "name": "_conveyor2",
        "x": 550,
        "y": 1560,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "9e22b5dcbfeba256",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_conveyor3a;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "",
        "name": "_conveyor3a",
        "x": 550,
        "y": 1640,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "9b78d4441cd41fdc",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_conveyor3b;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "",
        "name": "_conveyor3b",
        "x": 550,
        "y": 1700,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "86bdc05d0d9e5244",
        "type": "inject",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"opcuaCommand\":\"addVariable\"}",
        "payloadType": "json",
        "x": 190,
        "y": 1520,
        "wires": [
            [
                "486a7f7d96422b52",
                "ac4948c11cf7dab1",
                "bed851f112bd9bc5",
                "7ce7b716a79ac8f5",
                "e6e5eea52c68ead9",
                "e0713e27f9c226a7",
                "9e22b5dcbfeba256",
                "9b78d4441cd41fdc",
                "d484066f1af2a17a",
                "5cb8a18cdb39ba64",
                "02f12d4ebd41a80f",
                "1ecc7bcc7267ceb9",
                "eaba63b69bc314fc",
                "a255839ffd013d35"
            ]
        ]
    },
    {
        "id": "4d1108bbf86accbb",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Specify current sensor",
        "func": "let sensor_no = flow.get(\"sensor_no\")\n\nmsg.topic = \"ns=2;s=_sensor\"+ sensor_no +\";datatype=Boolean\"\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 420,
        "wires": [
            [
                "ee12a78c8542dd1b"
            ]
        ]
    },
    {
        "id": "ee12a78c8542dd1b",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 2280,
        "y": 420,
        "wires": [
            [
                "731d40389c96d767"
            ]
        ]
    },
    {
        "id": "731d40389c96d767",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Track order status",
        "func": "let sensor_no = flow.get(\"sensor_no\")\nlet order_no = flow.get(\"orders\")\nlet complete_orders = flow.get(\"completed_orders\")\nlet prevSenReading = flow.get(\"previousSensorReading\")\nmsg.completeFlavor = \"false\";\nmsg.completeOrder = \"false\";\n\nif(msg.payload & !prevSenReading){\n    prevSenReading = true\n    complete_orders[sensor_no] += 1\n    flow.set(\"completed_orders\", complete_orders)\n} else{\n    prevSenReading = false\n}\n\nif(complete_orders[sensor_no] >= order_no[sensor_no]){\n        // Turn on conveyor here\n        msg.emit = \"false\"\n        sensor_no += 1\n        if(sensor_no >= order_no.length){\n            msg.completeOrder = \"true\";\n        }\n        flow.set(\"sensor_no\", sensor_no)\n        msg.completeFlavor = \"true\"\n}\nflow.set(\"previousSensorReading\", prevSenReading)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 420,
        "wires": [
            [
                "fed2085c82e7c6bf",
                "ed569284ae12ce66",
                "fa438bf6077c2b32",
                "22e8dfa37ba01517"
            ]
        ]
    },
    {
        "id": "5948450e3ae04681",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 3460,
        "y": 420,
        "wires": [
            [
                "04bb2d1030a63e55"
            ]
        ]
    },
    {
        "id": "d484066f1af2a17a",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_Emitter0;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "0",
        "name": "_Emitter0",
        "x": 540,
        "y": 1760,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "5cb8a18cdb39ba64",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_Emitter1;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "0",
        "name": "_Emitter1",
        "x": 540,
        "y": 1820,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "02f12d4ebd41a80f",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_Emitter2;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "0",
        "name": "_Emitter2",
        "x": 540,
        "y": 1880,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "d58d4791b8018942",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 3920,
        "y": 420,
        "wires": [
            [
                "3130d749b1ba6fed"
            ]
        ]
    },
    {
        "id": "fed2085c82e7c6bf",
        "type": "switch",
        "z": "b96e85bed3b4466c",
        "name": "Check if a flavor is complete",
        "property": "completeFlavor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2800,
        "y": 420,
        "wires": [
            [
                "5b36854ad8020a73",
                "9c72d2984fb909f9"
            ]
        ]
    },
    {
        "id": "b0ee1e84e637f2fe",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "name": "Start conveyor belt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ns=2;s=_conveyor3a;datatype=Boolean",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3270,
        "y": 420,
        "wires": [
            [
                "5948450e3ae04681"
            ]
        ]
    },
    {
        "id": "5b36854ad8020a73",
        "type": "delay",
        "z": "b96e85bed3b4466c",
        "name": "Await box fall",
        "pauseType": "delay",
        "timeout": "1.65",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3050,
        "y": 420,
        "wires": [
            [
                "b0ee1e84e637f2fe"
            ]
        ]
    },
    {
        "id": "fc0352ed830c0c46",
        "type": "trigger",
        "z": "b96e85bed3b4466c",
        "name": "Polling loop",
        "op1": "",
        "op2": "",
        "op1type": "date",
        "op2type": "date",
        "duration": "-600",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1850,
        "y": 420,
        "wires": [
            [
                "4d1108bbf86accbb",
                "9be6c2fd7e751a5a"
            ]
        ]
    },
    {
        "id": "ed569284ae12ce66",
        "type": "switch",
        "z": "b96e85bed3b4466c",
        "name": "Check if order is complete",
        "property": "completeOrder",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2790,
        "y": 540,
        "wires": [
            [
                "d9e7b586bc2cbf43"
            ]
        ]
    },
    {
        "id": "070aa7c31bc0f59d",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "name": "Start second conveyor belt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ns=2;s=_conveyor3b;datatype=Boolean",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3240,
        "y": 540,
        "wires": [
            [
                "61370f8a295a80bc"
            ]
        ]
    },
    {
        "id": "d9e7b586bc2cbf43",
        "type": "delay",
        "z": "b96e85bed3b4466c",
        "name": "Await box fall",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3010,
        "y": 540,
        "wires": [
            [
                "070aa7c31bc0f59d"
            ]
        ]
    },
    {
        "id": "61370f8a295a80bc",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 3480,
        "y": 540,
        "wires": [
            [
                "daa9082bd87beaf5"
            ]
        ]
    },
    {
        "id": "2434c4beba637ca3",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "OPC UA Client: Conveyor 3b",
        "x": 4060,
        "y": 540,
        "wires": [
            [
                "23186531bf235375"
            ]
        ]
    },
    {
        "id": "9c72d2984fb909f9",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "name": "Reset polling loop",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1630,
        "y": 200,
        "wires": [
            [
                "fc0352ed830c0c46"
            ]
        ]
    },
    {
        "id": "3130d749b1ba6fed",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "name": "Restarts polling loop",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1640,
        "y": 60,
        "wires": [
            [
                "fc0352ed830c0c46"
            ]
        ]
    },
    {
        "id": "e1b1950c93748aba",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Initialize Variables",
        "func": "flow.set(\"sensor_no\",0)\nflow.set(\"completed_orders\", [0,0,0])\nflow.set(\"previousSensorReading\", false)\n\nmsg.payload = flow.get(\"completed_orders\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 420,
        "wires": [
            [
                "fc0352ed830c0c46"
            ]
        ]
    },
    {
        "id": "fa438bf6077c2b32",
        "type": "switch",
        "z": "b96e85bed3b4466c",
        "name": "Check if all sensors polled",
        "property": "sensor_no",
        "propertyType": "flow",
        "rules": [
            {
                "t": "cont",
                "v": "3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2790,
        "y": 360,
        "wires": [
            [
                "9c72d2984fb909f9"
            ]
        ]
    },
    {
        "id": "1ecc7bcc7267ceb9",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_Emitter3;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "0",
        "name": "_Emitter3",
        "x": 540,
        "y": 1940,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "6534f493b81f4fd4",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "name": "Start conveyor belt",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ns=2;s=_conveyor3a;datatype=Boolean",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1650,
        "y": 540,
        "wires": [
            [
                "14659c1969707262"
            ]
        ]
    },
    {
        "id": "14659c1969707262",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 1880,
        "y": 540,
        "wires": [
            [
                "8342a4582fd8d3f3"
            ]
        ]
    },
    {
        "id": "4957f4418bf3f8ef",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 2500,
        "y": 540,
        "wires": [
            [
                "e1b1950c93748aba"
            ]
        ]
    },
    {
        "id": "0935b57bb1fc7e92",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "name": "Emit new stackable box",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ns=2;s=_Emitter3;datatype=Boolean",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1670,
        "y": 620,
        "wires": [
            [
                "3c415b803c15ec4b"
            ]
        ]
    },
    {
        "id": "3c415b803c15ec4b",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 1900,
        "y": 620,
        "wires": [
            [
                "450c75d3e642097e"
            ]
        ]
    },
    {
        "id": "416bf2e799671af9",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 2480,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "450c75d3e642097e",
        "type": "subflow:023d3c161439f2e9",
        "z": "b96e85bed3b4466c",
        "name": "Stop emitting stackable boxes",
        "x": 2170,
        "y": 620,
        "wires": [
            [
                "416bf2e799671af9"
            ]
        ]
    },
    {
        "id": "8342a4582fd8d3f3",
        "type": "subflow:023d3c161439f2e9",
        "z": "b96e85bed3b4466c",
        "name": "Let box move and stop conveyor belt",
        "env": [
            {
                "name": "DELAY",
                "value": "3",
                "type": "str"
            }
        ],
        "x": 2190,
        "y": 540,
        "wires": [
            [
                "4957f4418bf3f8ef"
            ]
        ]
    },
    {
        "id": "daa9082bd87beaf5",
        "type": "subflow:023d3c161439f2e9",
        "z": "b96e85bed3b4466c",
        "name": "Stop second conveyor belt after wait",
        "env": [
            {
                "name": "DELAY",
                "value": "3",
                "type": "str"
            }
        ],
        "x": 3750,
        "y": 540,
        "wires": [
            [
                "2434c4beba637ca3"
            ]
        ]
    },
    {
        "id": "04bb2d1030a63e55",
        "type": "subflow:023d3c161439f2e9",
        "z": "b96e85bed3b4466c",
        "name": "Stop conveyor belt",
        "env": [
            {
                "name": "DELAY",
                "value": "3.9",
                "type": "str"
            }
        ],
        "x": 3670,
        "y": 420,
        "wires": [
            [
                "d58d4791b8018942"
            ]
        ]
    },
    {
        "id": "ada930365d2340a6",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "name": "Turn off Emitter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3500,
        "y": 200,
        "wires": [
            [
                "264ff222f1b0f873"
            ]
        ]
    },
    {
        "id": "264ff222f1b0f873",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 3700,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "e6750e8472caf06b",
        "type": "switch",
        "z": "b96e85bed3b4466c",
        "name": "Is emitting complete?",
        "property": "emit",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3300,
        "y": 200,
        "wires": [
            [
                "ada930365d2340a6"
            ]
        ]
    },
    {
        "id": "ad33aabb1f0e9a29",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 3160,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3c3156a93f054016",
        "type": "switch",
        "z": "b96e85bed3b4466c",
        "name": "Check if emitting is needed",
        "property": "emit",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2700,
        "y": 60,
        "wires": [
            [
                "d0ed84e2fc74045a"
            ]
        ]
    },
    {
        "id": "9be6c2fd7e751a5a",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Track emission",
        "func": "let orders = flow.get(\"orders\")\nlet completed_orders = flow.get(\"completed_orders\")\nlet sensor_no = flow.get(\"sensor_no\")\nmsg.topic = \"ns=2;s=_Emitter\"+sensor_no+\";datatype=Boolean\"\nif(completed_orders[sensor_no] < orders[sensor_no]){\n    msg.emit = \"true\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 60,
        "wires": [
            [
                "3c3156a93f054016"
            ]
        ]
    },
    {
        "id": "22e8dfa37ba01517",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Get current emitter",
        "func": "let sensor_no = flow.get(\"sensor_no\") - 1\n\nmsg.topic = \"ns=2;s=_Emitter\"+sensor_no+\";datatype=Boolean\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 200,
        "wires": [
            [
                "e6750e8472caf06b"
            ]
        ]
    },
    {
        "id": "d0ed84e2fc74045a",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "name": "Turn on Emitter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2960,
        "y": 60,
        "wires": [
            [
                "ad33aabb1f0e9a29"
            ]
        ]
    },
    {
        "id": "74f2761a1c685ede",
        "type": "ui_button",
        "z": "b96e85bed3b4466c",
        "name": "Start Button",
        "group": "a2e6905d71f2fd2f",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "5a5d7c85405b55c4"
            ]
        ]
    },
    {
        "id": "5a5d7c85405b55c4",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Query pending orders",
        "func": "msg.topic=`SELECT m.order_id, item_name, quantity FROM \n            MENU_ORDER m INNER JOIN ORDER_ITEM i ON m.order_id = i.order_id\n            WHERE order_status=\"Order successful\" ORDER BY m.date`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 380,
        "wires": [
            [
                "62a509be989f549f"
            ]
        ]
    },
    {
        "id": "62a509be989f549f",
        "type": "sqlite",
        "z": "b96e85bed3b4466c",
        "mydb": "9e381f49380c717d",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 480,
        "y": 460,
        "wires": [
            [
                "3f2f528b21a32e94"
            ]
        ]
    },
    {
        "id": "3f2f528b21a32e94",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Identify current order",
        "func": "const groupByKey = (list, key) => list.reduce((hash, obj) => ({...hash, [obj[key]]:( hash[obj[key]] || [] ).concat(obj)}), {})\n\nconst results = groupByKey(msg.payload, 'order_id'),\n      keys = Object.keys(results)\n      \nmsg.order_made = \"true\"\n\nif (keys.length === 0){\n    msg.order_made = \"false\"\n    msg.payload=\"No orders remaining\"\n    return msg;\n}\n   \nconst order_id = keys[0],\n      current_order = results[keys[0]]\n        \nlet item, quantity;\nlet order_array = [0,0,0]\n\nfor (let i=0; i<current_order.length; i++){\n    item = current_order[i].item_name,\n    quantity = current_order[i].quantity\n    setOrder(item, quantity)\n}\nflow.set(\"orders\", order_array)\n\n\nfunction setOrder(itemName, quantity){\n    let index;\n    if (itemName === \"WhiteLotus\"){\n        index = 0\n    } else if (itemName === \"RedBean\"){\n        index = 1\n    } else if (itemName === \"GreenTea\"){\n        index = 2\n    } else {\n        throw new Error(\"Unrecognized order\")\n    }\n    order_array[index] = Math.ceil(quantity/5)\n}\n\nmsg.topic = `UPDATE MENU_ORDER SET order_status=\"Making mooncakes\"\n             WHERE order_id=${order_id}`\nmsg.payload = \"Making mooncakes\"\nflow.set(\"order_id\", order_id)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 460,
        "wires": [
            [
                "b191a27b8dc9746e",
                "a0dc53b70055b220",
                "791f4bc8fd99ea9a"
            ]
        ]
    },
    {
        "id": "82b36f6d5378e7ce",
        "type": "ui_button",
        "z": "b96e85bed3b4466c",
        "name": "Stop Button",
        "group": "a2e6905d71f2fd2f",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 570,
        "y": 560,
        "wires": [
            [
                "b0c2d38cac8a17ce"
            ]
        ]
    },
    {
        "id": "791f4bc8fd99ea9a",
        "type": "ui_text",
        "z": "b96e85bed3b4466c",
        "group": "a2e6905d71f2fd2f",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status indicator",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1020,
        "y": 560,
        "wires": []
    },
    {
        "id": "f471c2759763b3bd",
        "type": "complete",
        "z": "b96e85bed3b4466c",
        "name": "Trigger if an order is complete",
        "scope": [
            "23186531bf235375"
        ],
        "uncaught": false,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "14723f3ba4138693"
            ]
        ]
    },
    {
        "id": "b0c2d38cac8a17ce",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Reset state",
        "func": "msg.invalid_reset = \"false\"\n\nlet order_id = flow.get(\"order_id\")\nif (order_id === undefined){\n    msg.invalid_reset = \"true\"\n    msg.payload = \"\"\n    return msg;\n} \n\nmsg.payload = \"Order paused\"\nflow.set(\"orders\", [0,0,0])\n\nmsg.topic = `UPDATE MENU_ORDER SET order_status=\"Order successful\"\n             WHERE order_id=${order_id}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 560,
        "wires": [
            [
                "791f4bc8fd99ea9a",
                "fcdb5f5e0e3d5e02"
            ]
        ]
    },
    {
        "id": "0de7aa6ce38bea1c",
        "type": "ui_numeric",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "White Lotus Picker",
        "label": "White Lotus ",
        "tooltip": "",
        "group": "8c9f0e9ab39782a0",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": false,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "3",
        "step": 1,
        "className": "",
        "x": 2110,
        "y": 860,
        "wires": [
            [
                "6337e2e7593a0408"
            ]
        ]
    },
    {
        "id": "0786470e050d17ad",
        "type": "ui_numeric",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "Red Bean Picker",
        "label": "Red Bean",
        "tooltip": "",
        "group": "8c9f0e9ab39782a0",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": false,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "3",
        "step": 1,
        "className": "",
        "x": 2110,
        "y": 920,
        "wires": [
            [
                "6abe68b949a3378d"
            ]
        ]
    },
    {
        "id": "c71770369a336503",
        "type": "ui_numeric",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "Green Tea Picker",
        "label": "Green Tea",
        "tooltip": "",
        "group": "8c9f0e9ab39782a0",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": false,
        "topic": "payload",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "3",
        "step": 1,
        "className": "",
        "x": 2110,
        "y": 980,
        "wires": [
            [
                "6148da871eaed997"
            ]
        ]
    },
    {
        "id": "6337e2e7593a0408",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "Set White Lotus Amount",
        "func": "let orders = flow.get(\"orders\")\nif(orders === undefined){\n    orders = [0,0,0]\n}\n\norders[0] = msg.payload\nflow.set(\"orders\", orders)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "6abe68b949a3378d",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "Set Red Bean Amount",
        "func": "let orders = flow.get(\"orders\")\nif(orders === undefined){\n    orders = [0,0,0]\n}\norders[1] = msg.payload\nflow.set(\"orders\", orders)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "6148da871eaed997",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "Set Green Tea Amount",
        "func": "let orders = flow.get(\"orders\")\nif(orders === undefined){\n    orders = [0,0,0]\n}\norders[2] = msg.payload\nflow.set(\"orders\", orders)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "ac9a2228daef2b02",
        "type": "ui_button",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "",
        "group": "8c9f0e9ab39782a0",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Confirm",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1300,
        "y": 800,
        "wires": [
            [
                "ea53ad91afc6fb6e",
                "911548d5b902c415",
                "6534f493b81f4fd4",
                "0935b57bb1fc7e92"
            ]
        ]
    },
    {
        "id": "ea53ad91afc6fb6e",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "Disable input upon accepting order",
        "func": "msg.enabled = false;\ndelete msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 800,
        "wires": [
            [
                "0de7aa6ce38bea1c",
                "0786470e050d17ad",
                "c71770369a336503",
                "ac9a2228daef2b02"
            ]
        ]
    },
    {
        "id": "0b925520a4301b62",
        "type": "ui_button",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "",
        "group": "8c9f0e9ab39782a0",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1290,
        "y": 1140,
        "wires": [
            [
                "8b519fca6d840be7",
                "38e9caa44078338c"
            ]
        ]
    },
    {
        "id": "8b519fca6d840be7",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "Enable input upon reset",
        "func": "msg.enabled = true;\nmsg.payload = \"\"\nflow.set(\"orders\",[0,0,0]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1140,
        "wires": [
            [
                "0786470e050d17ad",
                "0de7aa6ce38bea1c",
                "c71770369a336503",
                "ac9a2228daef2b02"
            ]
        ]
    },
    {
        "id": "184379c2b58cf9e7",
        "type": "ui_text",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "group": "8c9f0e9ab39782a0",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "Status Indicator",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2100,
        "y": 1040,
        "wires": []
    },
    {
        "id": "911548d5b902c415",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "Notify Order success",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Order is successful",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1620,
        "y": 880,
        "wires": [
            [
                "184379c2b58cf9e7"
            ]
        ]
    },
    {
        "id": "38e9caa44078338c",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "g": "687ed382f2a511da",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1560,
        "y": 1200,
        "wires": [
            [
                "184379c2b58cf9e7"
            ]
        ]
    },
    {
        "id": "b191a27b8dc9746e",
        "type": "switch",
        "z": "b96e85bed3b4466c",
        "name": "Proceed only if there are orders",
        "property": "order_made",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1170,
        "y": 460,
        "wires": [
            [
                "6534f493b81f4fd4",
                "0935b57bb1fc7e92"
            ]
        ]
    },
    {
        "id": "a0dc53b70055b220",
        "type": "sqlite",
        "z": "b96e85bed3b4466c",
        "mydb": "9e381f49380c717d",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 860,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "06e9f01a7e89b8fa",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Notify database of completion",
        "func": "let order_id = flow.get(\"order_id\")\n\nif (order_id === undefined){\n    msg.error = \"order_id not set\"\n    return msg;\n}\n\nmsg.topic = `UPDATE MENU_ORDER SET order_status=\"Order completed\"\n             WHERE order_id=${order_id}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "a0dc53b70055b220"
            ]
        ]
    },
    {
        "id": "fcdb5f5e0e3d5e02",
        "type": "switch",
        "z": "b96e85bed3b4466c",
        "name": "Check if stop was valid",
        "property": "invalid_reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 920,
        "y": 640,
        "wires": [
            [
                "8c5c489d662f68b8"
            ]
        ]
    },
    {
        "id": "8c5c489d662f68b8",
        "type": "sqlite",
        "z": "b96e85bed3b4466c",
        "mydb": "9e381f49380c717d",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1240,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "23186531bf235375",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Buffer node",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4310,
        "y": 540,
        "wires": [
            [
                "9c72d2984fb909f9"
            ]
        ]
    },
    {
        "id": "14723f3ba4138693",
        "type": "function",
        "z": "b96e85bed3b4466c",
        "name": "Check if order has been stopped",
        "func": "const orders = flow.get(\"orders\")\n\nmsg.stopped=\"false\"\nif (orders.toString() === [0,0,0].toString()){\n    msg.stopped = \"true\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 220,
        "wires": [
            [
                "71a1c69a3b7063ef"
            ]
        ]
    },
    {
        "id": "71a1c69a3b7063ef",
        "type": "switch",
        "z": "b96e85bed3b4466c",
        "name": "Proceed only if not stopped",
        "property": "stopped",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 180,
        "y": 300,
        "wires": [
            [
                "5a5d7c85405b55c4",
                "06e9f01a7e89b8fa"
            ]
        ]
    },
    {
        "id": "fcde74b9791f4ebd",
        "type": "trigger",
        "z": "b96e85bed3b4466c",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 140,
        "y": 740,
        "wires": [
            [
                "6463a616431308cb",
                "68d4203cefb70a26"
            ]
        ]
    },
    {
        "id": "eaba63b69bc314fc",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_start_btn;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "0",
        "name": "_start_btn",
        "x": 540,
        "y": 2020,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "a255839ffd013d35",
        "type": "OpcUa-Item",
        "z": "b96e85bed3b4466c",
        "g": "c1fd251844604729",
        "item": "ns=2;s=_stop_btn;datatype=Boolean;value=false",
        "datatype": "Boolean",
        "value": "0",
        "name": "_stop_btn",
        "x": 540,
        "y": 2080,
        "wires": [
            [
                "8dc7282cac11063e"
            ]
        ]
    },
    {
        "id": "2e3cdff1ccfd0bb0",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 180,
        "y": 440,
        "wires": [
            [
                "5a5d7c85405b55c4",
                "4614cbced9ff6a31"
            ]
        ]
    },
    {
        "id": "6463a616431308cb",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "name": "Start ",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ns=2;s=_start_btn;datatype=Boolean",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 740,
        "wires": [
            [
                "2e3cdff1ccfd0bb0"
            ]
        ]
    },
    {
        "id": "68d4203cefb70a26",
        "type": "change",
        "z": "b96e85bed3b4466c",
        "name": "Stop",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ns=2;s=_stop_btn;datatype=Boolean",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 820,
        "wires": [
            [
                "eb6ac626910eabed"
            ]
        ]
    },
    {
        "id": "eb6ac626910eabed",
        "type": "OpcUa-Client",
        "z": "b96e85bed3b4466c",
        "endpoint": "df2f1b827a0d1854",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 580,
        "y": 760,
        "wires": [
            [
                "b0c2d38cac8a17ce"
            ]
        ]
    },
    {
        "id": "4614cbced9ff6a31",
        "type": "debug",
        "z": "b96e85bed3b4466c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 560,
        "wires": []
    },
    {
        "id": "df2f1b827a0d1854",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://127.0.0.1:53880",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "a2e6905d71f2fd2f",
        "type": "ui_group",
        "name": "Orders",
        "tab": "d3d2f03a3e5dfe5d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9e381f49380c717d",
        "type": "sqlitedb",
        "db": "repos\\SQLite\\TeamEanventive.db",
        "mode": "RWC"
    },
    {
        "id": "8c9f0e9ab39782a0",
        "type": "ui_group",
        "name": "Make your order",
        "tab": "21b52f22cf82c223",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d3d2f03a3e5dfe5d",
        "type": "ui_tab",
        "name": "Control panel",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "21b52f22cf82c223",
        "type": "ui_tab",
        "name": "Order Panel",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]